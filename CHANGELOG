Version 2.5
- Automatic service deployment done dropping appConfig files in
  opal.deploy.path
- Support for tomcat 7.X, and tomcat 6.X
- Cleaner logging with few messages to the default level
- Improved Usage Statistics page layout
- Improvements to Condor job manager
- Extra config parameters for PBS job manager
- Removed support for globus GRAM
- Several fix to the userdocs

Version 2.4
- Additional operation added to Opal WSDL and AppService implementation to
  get system information (number of jobs running/queued, job manager type,
  data lifetime, etc)
- Updated database schema to support ACTIVE/INACTIVE service status to be
  used while plotting usage information. Feature not available for HSQL DB
- Ability to set the DRMAA queue and override it in the application
  configuration
- A set of absolute paths now accessible to applications via the
  opal.properties. In the past applications only had access to the current
  working directory
- getOutputs() operation now supports recursive listing of output
  directories
- A MetaService job manager for submission of jobs to other Opal servers
- Bug fixes for:
  - Error messages on Dashboard which were never reset
  - Usage Statistics fixes
    - Checking/unchecking boxes, which didn't work in the prior release
    - Error in the calculation of jobs when the services had similar names

Version 2.3.1
- Bug fixes for
  - Uploading of files in for non-mutually exclusive groups on the
    auto-generated forms
  - Ability to copy attachments across different partitions when the
    working directory is being symlinked
  - Opal SOAP filter for typed services
    - Failure of generic Opal command-line client while uploading input files
    - Interoperability with Axis2 MTOM WSDL2Java clients

Version 2.3
  - PBS support, using a modified version of the pbs4java package
  - Added a limit to the Fork job manager for number of jobs that can be
    executed concurrently
  - Support for upload of tarballs for inputs
  - Support for user email as an optional argument
  - Removal of number of CPUs for non-parallel jobs on input form
  - Support for dynamic addiiton for multiple files upload on simple form
  - Modification of jobID to include service name
  - Refreshed look and feel for Opal dashboard
    - update navigation bar layout 
    - enable navigation bar round corners without image files
    - add coyuright to all pages
    - move all documentation liks to one page
    - enable sorted applications list upon first page load
    - move application usage info into a "row expander"
    - add "Help" tooltip for novice users navigation
    - stop page refresh when job is finished. The default refresh rate is set to 30 sec.
    - Add time stamp for page refreshing.
    - enable radio buttons grouping separation. Fixes a bug of not displaying choosen buttons.
    - enable dynamic addiiton for multiple files upload on simple form
    - redirect to "timeout" page on a session tiemout. Increase the session timeout to 30min
    - enable one accesible option from a selection: 
      user can type in the field only after making a selection choice and not before. 
  - Bug fix for destroy() operation, where baseURL was incorrectly
    returned as empty after job destruction
  - Bug fix for IP limits where the query for filtering by IP was incorrect
  - Bug fix for Opal GUI timeout error for simple form
  - Bug fix for SOAP filter to support large files and for empty arguments
  - Bug fix for radio buttons group separaton: 
  - Bug fix for making accessible only a single option from selection

Version 2.2
- DRMAA jar upgraded to version 6.1
- Support for DB2 for state monitoring
- Automatic WSDL generation (optional) - Anthony's update
- Use of MIME attachments in the Opal dashboard - the dashboard can now
  support larger files
- Basic Per-IP limit on number of jobs per hour, to stop overload of servers

Version 2.1
- Improved Ajax-based dashboard that enables searching applications by
  their metadata
- Use of C3P0 for providing production-level connection pooling for state
  management, and addition of support for MySQL database back-end
  (contributed by Anthony Bretaudeau)
- Addition of two new job managers - for Condor and the Community Scheduler
  Framework (CSF4)
- Updated user guide consistent with all new features
- Bug fixes include removal of hardcoding of opal url in the dashboard
  code, and fixing the default HSQL configuration to write data to within the
  opal2 webapp

Version 2.0.1
- Opal Dashboard
  - Applications are now grouped with their name 
  - The applications list is now alphabetically ordered


Version 2.0:
- Opal Core
  - upgraded the hiberate to 3.3.1 and all its dependecies
  - upgraded log4j
  - changed the schema of the Database, splitting the Timestamp into two field
    Date and Time
  
- Opal Dashboard
  - fixed several bugs in the generation of the charts
  - fixed some bugs in the status page of the dashboard


Version 2.0RC1
   - several bug fixes from the alpha
   - added getStatistics operation to wsdl and service implementation
   - modified opal.properties to use Java reflection for instantiation of
     Opal job managers
   - developer guide for Opal plugins
   - added support for Tomcat 5.5.X and updated giude

Version 2.0alpha1

- Opal Core
  - Complete re-design of the Opal implementation to support a plug-in
    based model at the back-end where resource providers (Fork, Globus,
    DRMAA) can be plugged in easily at the back-end
  - State management with the help of Hibernate, which supports an
    in-memory and disk-based database (HSQL DB) by default. This enables
    the complete functionality of the Opal dashboard out of the box
  - WSDL modifications to support
    - MIME attachments and file URLs for inputs, in addition to legacy
      style Base64 encoding
    - Addition of max wall clock time in the application configuration
    - Argument validation on a per application basis, via the application
      configuration
    - Optional selection of resource provider on a per application basis
  - Added a set of JUnit tests
  - The list of Opal service deployed can be also be abtained at 
    /opal2/opalServices.xml in Atom 1.0 format

- Opal GUI
    - Number of CPUs can now be specified via the submission form

Version 1.9.3:

- Opal Dashboard:

   - Fixed a bug in the submission form where input file parameters were not 
     properly handled on the command line

   - Fixed a bug in the automatic interface generation where an exception
     was thrown if the number of flags were zero

   - Fixed a bug where the usage information wasn't displayed correctly for 
     the automatically generated interface

   - Fixed a locale issue in the formatting of dates used by the statistics
     tab of the dashboard

- Opal Services:
   
   - Fixed a bug where the job status was being retrieved incorrectly
     during a destroy() operation when a database was being used to persist
     state

   - Updated command-line argument validation client to now account for groups

   - Improved clean task of the build.xml file, now it deletes also the generated 
     JavaDoc

Version 1.9.2:

- Opal Dashboard:

  - The simple submission form now supports upload of multiple input files

  - The output page after job submission is now opened in a new window

  - The help section of the submission form now displays HTML tags correctly

  - The list of jobs currently running is plotted as a bar graph, with
    different colors for every service

  - Better error reporting if database connection can not be established
    for statistical purposes

  - The summary page now displays the lifetime for the user data to be
    available on the remote cluster (by reading a parameter from the
    opal.properties file)

  - Corrected the "load-on-startup" order of the servlets - an incorrect
    order could potentially cause a database connection error

- Opal Services:
  
  - In earlier versions of Opal, the Tomcat server had to be installed on
    an NFS partition visible to all compute nodes. This is no longer
    required as long as a working directory is NFS mounted, and
    symbolically linked to a location within the Tomcat "webapps" directory

  - Job outputs can optionally be archived by setting a parameter
    (data.archive) inside the opal.properties file

- General:

  - The code should now compile and run with Java 1.4 and older JSP compilers


Version 1.9 alpha:

- Opal Dashboard: it is a web based interface that provide an easy way to check the 
  status of the opal installation 

- If an external database has been used the Dashboard can also display chart with 
  access and usage statistics

- Dynamic Interface Generation for Opal: This web based interface allows user to 
  invoke Opal based service directly from their browser. It is also possible to 
  create customized submission form based on the command line syntax

- Modified and streamlined the install and upgrade process - now bundling
  axis webapp with Opal, thus reducing an external prerequisite
