<chapter id="overview" xreflabel="Overview">
<title>Overview</title>

<para>Opal Toolkit version: &version;</para>

<para>The Opal toolkit enables wrapingp existing scientific
applications as Web services, and exposing them to various clients.
The implementation provides features such as 
<emphasis role="strong">scheduling</emphasis> (e.g. using Condor, PBS and SGE via DRMAA),
<emphasis role="strong">security</emphasis>
using GSI-based certificates,
<emphasis role="strong">job and data management</emphasis> by executing
every job in a separate working directory, 
<emphasis role="strong">state management</emphasis> by storing the service state 
via Hibernate in a database such as HSQL, PostgreSQL, MySQL or DB2). 
</para>

<para>The application developer specifies a
configuration for a scientific application and deploys the application as a
web service. Now this application is available via service interface to remote end users. 
</para>

<para>The service interface is described in Web Services Description Language (WSDL) and is
defined in <emphasis role="italics">wsdl/opal.wsdl</emphasis> file. Stub
generators provided by Web service toolkits are used to generate the
client and server-side bindings for the services. The services
are implemented in Java using the Apache Axis toolkit, while the clients
can be written in any language.</para>

<para>The WSDL defines the following operations: </para>
<itemizedlist spacing="compact">
   <listitem><para>
   <emphasis role="strong">getSystemInfo</emphasis> - get system information. This operation returns basic
   system information for the Opal server, including the number of total
   and free CPUs, number of jobs running and queued, the job
   manager type, etc.</para></listitem>

   <listitem><para>
     <emphasis role="strong">getAppMetadata</emphasis> - get application metadata. This 
     operation returns application metadata which includes usage information, along
     with any number of arbitrary application-specific metadata specified as
     an array of <filename>info</filename> elements, e.g. description of the various
     options that are passed to the application binary. Ideally, these
     elements should be arbitrary XML tags (specified by <filename>xsd:any</filename>).
     Due to the limitations of certains toolkits in other languages
     (e.g. ZSI in Python), we specify them as <emphasis>strings</emphasis>. You may embed
     XML tags inside them using <emphasis>CDATA</emphasis> sections. The metadata 
     can include an optional <filename>types</filename> element, which
     describes the application command-line arguments. This element is described in detail in
     the <xref linkend="opalGUI-advancedsub"> section.
   </para></listitem>

   <listitem><para>
     <emphasis role="strong">launchJob</emphasis> - launch job. This
     operation requires a list of arguments as a string, and an array of
     structures representing the input files. Each structure contains the
     <emphasis role="italics">name</emphasis> of the input file and either
     the <emphasis role="italics">contents</emphasis> in Base64 encoded
     binary form, a MIME <emphasis role="italics">attachment</emphasis>, or
     a <emphasis role="italics">location</emphasis> (URL) to the
     associated file. The operation returns a Job ID that can be used to
     retrieve jobs' status and outputs.
   </para></listitem>
  
   <listitem><para>
     <emphasis role="strong">launchJobBlocking</emphasis> - launch blocking job. This operation
     requires a list of arguments as a string, and an array of structures
     representing the input files.  The operation blocks until the remote execution is complete, 
     and returns job outputs (as described above) as the response. This operation is
     appropriate only for jobs that are short running.
   </para></listitem>

   <listitem><para>
     <emphasis role="strong">queryStatus</emphasis> - query job status. This operation expects a
     Job ID to query the status of a running job and returns a status code, message, and
     URL of the working directory for the job.
   </para></listitem>

   <listitem><para>
     <emphasis role="strong">getJobStatistics</emphasis> - get job statistics. This operation returns basic
     job statistics including start time, activation time and completion time
     for a given Job ID.
   </para></listitem>

   <listitem><para>
     <emphasis role="strong">getOutputs</emphasis> - get job outputs. This operation returns the
     outputs from a job that is identified by a Job ID. The output consists
     of the URLs for the stdout and stderr, and an array of
     structures representing the output files. The structure contains the
     <emphasis role="italics">name</emphasis> of the output file and the <emphasis role="italics">url</emphasis> from where it can be
     downloaded.
   </para></listitem>

   <listitem><para>
     <emphasis role="strong">getOutputAsBase64ByName</emphasis> - get output file by name. This
     operation returns the contents of an output file as Base64 binary. The
     input is a data structure that contains the Job ID for a particular job,
     and the name of the file to be retrieved.
   </para></listitem>
  
   <listitem><para>
     <emphasis role="strong">destroy</emphasis> - destroy job. This operation destroys a running
     job identified by a Job ID.
   </para></listitem>

</itemizedlist>

<para>
Please see <ulink url="http://www.nbcr.net/data/docs/opal/deployment.html">Opal use cases examples</ulink>
for more info.
</para>

</chapter>
